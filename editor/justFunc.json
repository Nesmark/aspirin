{
  "add": "\ntpl = `\n<div class=\"btn-group\">\n<button class=\"btn btn-mini btn-default act-back\">\n<span class=\"icon icon-left-open-big\"></span>\n</button>\n<button class=\"btn btn-mini btn-default act-save\">\n<span class=\"icon icon-check\"></span>\n</button>\n</div>\n<div class=\"btn-group\">\n<input type=\"text\" class=\"form-control form-control-mini\" \nplaceholder=\"enter name\">\n</div>\n`;\n\nel = $(tpl);\n\n$('#second_toolbar').html(el)\nel.find('.act-back').click(just.render);\nel.find('.act-save').click(function(){\n\tvar nn = el.find('input').val().trim();\n  if(nn && nn != ''){\n\t  just.setName(nn);\n  \tjust.render()\n  }\n});\n",
  "edit": "just.run2 = just.run; \njust.run = just.edit;\n\n$('#second_toolbar').addClass('act-edit')\n",
  "save": "if(just.name){\n\tjust.set(just.name, editor.getValue())\n}else{\n  just.run('add');\n}\njust.save();\n",
  "load": "just.load();\n just.render();\n",
  "ls": "wls = _(windowManager.windows).map(function(v){\n  return v.name + '   <sup>Ã¸ ' \n    + v.object.getPosition() + ' se ' + v.object.getSize() + ' </sup>'\n})\njustShowResult(van_dump(wls), true)\n",
  "color": "\n//justShowResult(van_dump(arguments))\nif(arguments[1]){\n  arguments[1].classList.toggle('btn-default');\n  arguments[1].classList.toggle('btn-warning');\n}\nif(typeof colorRotate == 'undefined' || !colorRotate){\n//  n=0;\n  colorRotate = setInterval(function(){\n    n = n%359;\n    clr = `hsla(${n++},82%,52%,0.5)`;\n    $('body').css('backgroundColor',clr);\n    //justShowResult(n)\n  },50);\n}else{\n  clearInterval(colorRotate);\n  colorRotate = false;\n}\n\n",
  "sJ2": "var res = _(eval(editor.getValue())).chain()\n  .mapObject(function(v, k){\n    var tpl = `<div class=\"toolbar bar result\">\n<pre> <big>${k}</big>\t\n   <code>${_.escape(String(v).trim())}</code>\n</pre></div>`\n    return tpl;\n  })\n  .values()\n\t//.first(7)\n  .value()\n  .join('<hr/>\\n')\n\n$('#composite').html(res);\nsyncSizeLines()",
  "clr": "//createBrowser('http://gooogle.com')\n$('#composite').html('');\n$('body').css('backgroundColor','transparent');\njustShowResult(null)\ndocument.querySelector('header').style.background = 'rgba(41, 120, 177, 0.5)';\n",
  "md5": "hash = md5(editor.getValue())\njustShowResult(van_dump(hash))\n",
  "ksave": "if(just.name){\n\tKnows.save(just.name, editor.getValue())\n  if(w = getWin(just.name)){\n  \tw.execute(\"Knows.run('\"+just.name+\"')\")\n  \tjustShowResult('<b style=\"color:orange;\">Saved code and Updated window {'+just.name+'}</b>', true)\n  }else{\n    justShowResult('<b style=\"color:green;\">Only saved code</b>', true)\n  }\n}else{\n  just.run('add');\n}\n'wait'\n",
  "krun": "if(w = getWin(just.name))\n  w.execute(`Knows.run('${just.name}');`)\nelse\n\tKnows.run('editor');\n\n",
  "kedit": "if(just.name){\n\tkey = just.name;\n  runCodeOverride = function(){\n     just.run('ksave');\n  }\n\tKnows.getDb().findOne({key:key}).exec(function(err,data){\n\t\tstr = data.source\n\t\teditor.setValue(str) //editor.getValue()+'\\n'+\n\t})\n}else{\n  just.run('add');\n}\n",
  "kls": "\nKnows.getDb().find({ key: { $exists: true } }, function (err, docs) {\n  //justShowResult(_.zip(_(docs).pluck('key'),_(docs).pluck('source')).join('\\n--\\n'))\n  \n  var list = _(docs).chain()\n\t.map(function(v,k){\n    return `<button class=\"btn btn-mini btn-default act-choose\" data-key=\"${v.key}\">\n<span class=\"icon icon-target\"></span>\n<span class=\"icon icon-text\">${v.key}</span>\n</button>`;})\n  .value().join('');\n\t\n  tpl = `\n<div class=\"btn-group\">\n<button class=\"btn btn-mini btn-default act-back\">\n<span class=\"icon icon-left-open-big\"></span>\n</button>\n<button class=\"btn btn-mini btn-default act-save\">\n<span class=\"icon icon-check\"></span>\n</button>\n</div>\n<div class=\"btn-group\">${list}</div>`;  \n\n  el = $('#second_toolbar');\n  el.html(tpl);\n  el.find('.act-back').click(just.render);\n  el.find('.act-choose').click(function(e){\n    var nn = $(this).data('key');\n    if(nn && nn != ''){\n      just.setName(nn);\n      just.render()\n      just.run('kedit');\n    }\n  });\n  \n  justShowResult('done')\n});\n//Object.keys(kk)\n'wait'\n\n",
  "ToT": "q = !(typeof q == 'boolean') || !q;\nexw = [\"toolbar\", \"listknows\", \"showTime\", \"fulloverlay\"];\n_(windowManager.windows).chain()\n  .filter(function(w){\n    return !exw.includes(w.name)\n  })\n  .each(function(w){\n  w.object.setAlwaysOnTop(q);\n})\n\n",
  "ignore_mouse": "\nw = getWin(just.name)\nw.setIgnoreMouseEvents(!w.isIgnoreMouseEvents())\n",
  "jetpack_sample": "\njetpack.find(remote.app.getHomeDir()+'/Desktop/',\n             { matching: 'Screen Shot*'})\n",
  "chromeAllTabs": "\nalltabs = jetpack.read('../allTabs_chrome.json', 'json');\njustShowResult(_(alltabs).pluck('url').join('\\n'))\n"
}